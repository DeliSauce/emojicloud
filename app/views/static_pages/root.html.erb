<!DOCTYPE html>
<html id="root">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/emojione/2.2.7/assets/css/emojione.min.css"/>
<!-- <script src='http://cdn.jsdelivr.net/emojione/2.1.4/lib/js/emojione.min.js'></script>
<link rel='stylesheet prefetch' href='http://cdn.jsdelivr.net/emojione/2.1.4/assets/css/emojione.min.css'> -->
<script src='https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.16/d3.min.js'></script>
<script src="https://cdn.jsdelivr.net/emojione/2.2.7/lib/js/emojione.min.js"></script>
  <head>
    <meta charset="utf-8">
    <title></title>
  </head>

  <body>
    <div id="emoji">
      <h1 id="emoji-header">Emojicloud</h1>

      <div id="tweet">
        <img id="tweet-img" height="30px" src="https://upload.wikimedia.org/wikipedia/en/thumb/9/9f/Twitter_bird_logo_2012.svg/738px-Twitter_bird_logo_2012.svg.png" alt="">
        <div id="tweet-text"> </div>
      </div>

      <svg id="cloud"></svg>

      <div id="emoji-controls">
        <button class="emoji-controls-btn" onClick=fetchEmojis('world')>World</button>
        <button class="emoji-controls-btn" onClick=fetchEmojis('africa')>Africa</button>
        <button class="emoji-controls-btn" onClick=fetchEmojis('asia')>Asia</button>
        <button class="emoji-controls-btn" onClick=fetchEmojis('europe')>Europe</button>
        <button class="emoji-controls-btn" onClick=fetchEmojis('us')>US</button>
      </div>

    </div>

    <div id="map">
      <script>
        function initMap() {
          var uluru = {lat: -25.363, lng: 131.044};
          var map = new google.maps.Map(document.getElementById('map'), {
            zoom: 4,
            center: uluru
          });
          var marker = new google.maps.Marker({
            position: uluru,
            map: mape
          });
        }
      </script>
    </div>

  </body>

  <script async defer
  src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC0M_LTkZTCrvdscBqVHbpmhizR1z4VK2k&callback=initMap">
  </script>

  <script>
  // $(function() {
  // import d3 from 'd3';
  // var d3 = require('d3');
  // import emojione from 'https://cdn.jsdelivr.net/emojione/2.2.7/lib/js/emojione.min.js'
  // import d3 from 'https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.16/d3.min.js'
  // $(document).ready(function() {

    let emojis;
    fetchEmojis('world', 'static');

    function fetchEmojis(place, feed) {
      let path = '/api/' + place + '_emojis'
      if(feed == 'static') path += '/1'

      d3.json(path, function(data) {
        svg.selectAll("*").remove();
        emojis = getEmojis(data.emojis);
        addPerson();
      })
    }

    function getEmojis(emojis) {
      let totalVolume = 0;
      let minCount;
      let maxCount;
      Object.values(emojis).forEach((arr, idx) => {
        let count = arr[0];
        totalVolume += ((1 + Math.log(count)) * (1 + Math.log(count)));
        if (idx === 0) {
          minCount = count;
          maxCount = count;
        } else {
          if (count < minCount) minCount = count;
          if (count > maxCount) maxCount = count;
        }
      });
      console.log(totalVolume, minCount, maxCount);

      let emojiScalingFactor = getScalingFactor(totalVolume, minCount, maxCount);

      console.log(totalVolume);
      return Object.keys(emojis).map(function(emoji) {
        // console.log(emojione.unicodeToImage(emoji).match(/src="(.*)"/)[1])
        return {
          emojiType: emojis[emoji][1],
          // imageUrl: emojione.shortnameToImage(emoji).match(/src="(.*)"/)[1],
          imageUrl: emojione.unicodeToImage(emoji).match(/src="(.*)"/)[1],
          count: (1 + Math.log(emojis[emoji][0])) * emojiScalingFactor
        };
      });
    }

    function getScalingFactor(total, min, max) {
      let factor = Math.sqrt(width * height / total);
      console.log(factor, width, height, total);
      return factor/2
    }

    var width = 500;
    var height = 500;
    var nodes = [];
    var links = [];
    var svg = d3.select("#cloud")
        .attr("width", width)
        .attr("height", height)
        .attr('background-color', 'blue');

    var node = svg.selectAll(".node");


    var force = d3.layout.force()
        .nodes(nodes)
        .links(links)
        .size([width, height])
        .on("tick", tick)
        .linkStrength(0.8)
        .friction(0.9)
        .linkDistance(2)
        .charge(-100)
        .gravity(0.1)
        .theta(0.8)
        .alpha(4.1);

    function start() {
        node = node.data(force.nodes(), function(d) {
            return d.index;
        });
        node.enter()
            .append("svg:image")
            .attr("xlink:href", function (d) {
              return d.imageUrl;
            })
            .attr("height", function (d) {
              return d.count; // scaleEmoji(d.count);
            })
            .attr("class", function(d) {
                return "node";
            })
            .attr("emojiType", function(d) {
                return d.emojiType;
            });
            // .on("mouseover", fade(.1, true));
            // .attr("width", 120)
            // .attr("height", 120)
        node.exit().remove();
        node.call(force.drag)
            .on("mousedown", function() {
                console.log(node);
                d3.event.stopPropagation();
            });
        // node.on("mousedown", function() {
        //         console.log(node);
        //     });
        node.on("mouseover", function(d) {
          console.log(d.emojiType);
          updateSidebar(d.emojiType);
          // node.attr("height", function(d) {
          //   return 100;
          // });
        });
        force.start();
    }

    let tweets = document.getElementById('tweet-text');
    function updateSidebar(emojiType){
      tweets.innerHTML = emojiType;
    }

    function tick(e) {
        node.attr("x", function(d) {
                if (d.x >= width - (d.count)) {
                  return width - (d.count);
                } else if (d.x <= 0) {
                  return 0;
                } else {return d.x;}
            })
            .attr("y", function(d) {
                    if (d.y >= height - (d.count)) {
                      return height - (d.count);
                    } else if (d.y <= 0) {
                      return 0;
                    } else {return d.y;}
                });
            // .each(cluster(10 * e.alpha * e.alpha))
            // .each(collide(.5))
    }
    let padding = 15, // separation between same-color circles
        clusterPadding = 16, // separation between different-color circles
        maxRadius = 12;

    function getInitialPosition() {
      var position = {};
      var dir = Math.floor(Math.random() * 4);
      if (dir === 1) {
        position.x = Math.random() * width;
        position.y = 0;
      } else if (dir === 2) {
        position.x = Math.random() * width;
        position.y = height;
      } else if (dir === 3) {
        position.x = 0;
        position.y = Math.random() * height;
      } else if (dir === 4) {
        position.x = width;
        position.y = Math.random() * height;
      }
      return position;
    }
    var delay = 10;

    function addPerson() {
      var feeling = emojis.pop();
      var position = getInitialPosition();
      // feeling.x = width/2;
      // feeling.y = width/2;
      // feeling.x = position.x;
      // feeling.y = position.y;
      nodes.push(feeling);
      console.log("hello");
      start();
      if (emojis.length > 0) {
        setTimeout(function () {
          addPerson();
        }, delay);
          delay -= .1;
      }
    }
    // addPerson();
  </script>
</html>
